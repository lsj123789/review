// 判断一个整数是否是回文数。回文数是指正序（从左向右）和倒序（从右向左）读都是一样的整数。
// 示例 1:

// 输入: 121

// 输出: true

// 示例 2:

// 输入: -121

// 输出: false

// 解释: 从左向右读, 为 -121 。 从右向左读, 为 121- 。因此它不是一个回文数。

// 示例 3:

// 输入: 10

// 输出: false

// 解释: 从右向左读, 为 01 。因此它不是一个回文数。

// 方法一：

// 分析：先将数字转为字符串，再转为数组，数组反转，反转之后再将数组转为字符串，比较反转之后的字符串和之前的字符串相比，返回结果

// 知识点：

// 1.  一元运算符 +  字符串加数字 会转为拼接后的字符串

// 2. array.from()：es6新增的数组方法，可以将两类对象转为真正的数组，第一类是类数组对象，第二类是可遍历的对象(Set,Map 结构和 array)

//      类数组对象举例：

//                                let arrayLike = {

//                                              '0' : 'a',

//                                              '1' : 'b',

//                                              length:2

//                                }

// 3.reverse() ：颠倒数组中元素的顺序，会改变原来的数组，而不会创建新的数组

// 4. join()：用于把数组中的所有元素放入一个字符串，元素是通过指定的分隔符进行分隔的

// 代码：

let isPalindrome = function (x) {
    if (x < 0) {
        return false;
    };
    let str = '' + x // 将 x 转为字符串
    return Array.from(x).reverse().join(" ") === str
}



// 方法二：

// 分析：将数字转为字符串，从后往前循环字符串，将循环出来的字符串拼接出新的字符串，比较两个字符串，得出结果。

// 代码：

let isPalindrome = function (x) {
    let str = ' ' + x;
    for (let i = str.length - 1; i >= 0; i--) {
        let newStr = str[i] + newStr;
    }
    return str === newStr
}