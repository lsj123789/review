// 给定一个非负整数数组 A， A 中一半整数是奇数，一半整数是偶数。
// 对数组进行排序，以便当 A[i] 为奇数时，i 也是奇数；当 A[i] 为偶数时， i 也是偶数。
// 你可以返回任何满足上述条件的数组作为答案。
// 示例：
// 输入：[4,2,5,7]
// 输出：[4,5,2,7]
// 解释：[4,7,2,5]，[2,5,4,7]，[2,7,4,5] 也会被接受。
// 提示：
// 2 <= A.length <= 20000
// A.length % 2 == 0
// 0 <= A[i] <= 1000
// 方法一：不用排序，筛选出奇数和偶数，然后遍历原数组，当i是偶数时，把偶数数组中的一项插入到A[i],当i是奇数时，把奇数数组插入到A[i]。
// 知识点：
// shift()：删除数组中第一个元素并返回数组原来的第一个元素（也就是被删掉的这个元素），如果数组是空的，那么shift（）不进行任何操作，返回undefined，该方法不创建新的数组，而是直接修改原数组。
// filter()：接收一个函数作为参数，（这个函数的参数可以有三个，第一个是当前元素的值，第二个是当前元素的所引致，第三个是当前元素所属的数组对象），返回一个新数组，数组中的元素是经过参数函数操作后返回的值，不会对空数组进行检测，不会改变原数组。
// 代码：

let sortArrayByParityII = function (A) {
    let odd = A.filter(item => {
        return item % 2 === 1;
    })
    let even = A.filter(item => {
        return item % 2 === 0;
    })
    let res = [];
    for (let i = 0; i < A.length; i++) {
        if (i % 2 === 0) {
            res[i] = even.shift()
        } else {
            res[i] = odd.shift()
        }
    }

    return res;

}

// 执行用时：140ms；内存消耗：42.2MB