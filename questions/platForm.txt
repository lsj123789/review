刚刚拿到设计稿的时候，看上去只是几个简单的页面，没想那么多，直接上手开始写。后面出现很多问题，这里整理下，大致分了四个方面：

1. 由于一开始的思考较少，没有理清各个模块之间的关系，导致后面出现的问题：

一：开始没有考虑到组件复用的问题，写到一半再去抽组件，导致之前做了一些无用功。同时，公共组件，应该写成纯展示组件，不应该写进去很多方法，应该直接数据传进去，dom 输出来，简单明了。

二：没有充分了解 umi 的目录结构，忽略了应该在 layouts 中布局。

三：开始没有考虑到刷新的问题。只想着获取团队列表之后，所有的更新都可以靠数据来驱动，所以都是在触发事件的时候 把数据在两个组件之间来回传递，但这种方式有很大的弊端，就是他的路由始终都是一个，所以在刷新之后，会回到主页面，无法保留当前页面和操作。

解决：采用 umi 的可选动态路由，然后用 url 参数——this.props.match 拿到当前的 id（团队对应的是 teamId，项目对应 projectId），再根据相应 id 去获取对应数据。这样，每一个团队或是项目都有自己的路由，在刷新的时候不会丢失。数据加载完成，组件也渲染完成之后，切换团队，此时不会重新去获取一遍数据，这时可以在componentDidUpdate中，监听prevProps 中的 teamId 和 this.props中的 teamId 是否相同，不同的时候再根据 this.props中的 teamId 重新获取一遍数据。

四：没有考虑到项目列表过多的情况。如果项目列表过多的话，应该加一个分页功能，固定下每页的项目数，超过该值要进行翻页。

2. 对业务逻辑不熟悉，导致的问题：

一：删除是很危险的操作，是否应该放在很明显的位置，删除时应该做一些校验。

二：没有理清楚各个管理员的权限问题。比如：超级管理员和团队管理员是可以创建、编辑和删除团队的，这里需要做一些权限的校验。比如：先判断一个用户是否是团队管理员或是超级管理员，如果两者都不是的话 ，其实是没有必要把这些操作展示给该用户的，可以避免误操作同时体验友好。

三：无数据和路由错误时：无数据时应该有所提示或者展示一些内容，这样体验比较友好。用户输错路由时，也应该给提示跳转回首页或者直接跳转回首页。

四：没有充分理解各个操作的意义，比如：接口鉴权中的编辑图标，他的逻辑应该是表单和按钮默认置灰，点击编辑图标，表单状态可编辑，但此时保存修改的按钮应该还是置灰状态，当有所修改才是可保存状态。

五：在接口鉴权和接口转发中，开始是缺少一些操作的，但由于对业务逻辑的不够理解，没有想到这些，导致后面需要重新回来增加这些操作。

六：混淆了分类和接口，将修改分类的逻辑加在了修改接口上。

七：没有新建分类，就不能进行新建接口操作。

八：每个项目至少有一个管理员，删除管理员时应该做一个限制。

3. 代码层面的问题：

一：表单输入格式的校验：如果输入内容是路径的话，应该做一个自定义校验，校验一下路径的格式，输入错误的话也应该给用户提示，提示一下正确的格式。危险操作也应该校验一下。

二：由于之前对代码位置修改较多，导致很多数据混乱，需要重新过一遍。

三：对代码应该时刻保持有洁癖的状态，在布局时，差1px 也是差。

四：遇到 warning 时要及时解决，不能想着先实现功能再解决问题。这样问题排查时，不容易找到问题所在。

五：关于项目整体的颜色问题，应该统一去修改，不是每个模块都修改一次，方便代码的维护。

六：所写代码必须语义正确，组件也必须正确使用，比如：不能该使用tooltip的地方使用popover，类似这种的问题，有一部分原因还是来自对 antd 组件库的不够了解。

七：写代码时没有精确到每一个小图标，图标使用了 antd 里面的 icon，但其实 icon 和设计稿还是有一点差距，应该找设计要一下切图，然后引入这些图标，再给他添加事件。

八：项目数据和团队数据应该是两套，不应该写在一个 model 里面。

九：一些细节问题没有注意到，比如：所有的按钮和有事件的操作鼠标移入应该展示一个可点击态，删除按钮是危险操作，应该和其他按钮有区分，比如颜色的区分。

4.  关于 antd 使用的一些问题

一：Modal：

1. 改变 modal 的宽高，如果直接给 modal 一个类名，再去改他的宽度，会出现 modal 不居中问题。

2. 使用 modal.confirm方法时，点击确定和 modal 的右上角取消图标都会提交执行确认的方法

解决：查找确认方法和取消方法的执行，使用条件判断。

解决：使用 modal 自己的 width 属性。

二：Tab：使用 tabs 时，如果页面布局使用了定位，切换时会出现定位的部分不动，其他部分移动的现象。

解决：使用 flex 布局。

三：Menu：

1. menu 的 defaultSelectedKey只有第一次渲染时生效，后面切换菜单时，要用 selectedKeys，接收一个数组，数组里面是字符串类型。

2. menu的onClick属性只有点击MenuItem时才会触发，默认参数key属性即为当前被点击的menuItem。

四：Form：

1. form 表单有自己的默认校验和自定义校验方式，不需要自己写。切换时表单的默认值要重置

2. 表单验证后错误信息已经打印到控制台上，但页面中并没有显示错误信息

   分析：填写表单时触发onFieldsChange将变化的value存放到store中store状态改变触发mapPropsToFields将store的值回显到页面中

  原因：store只保存了表单的value，导致store回显到页面时没有error信息，所以页面中不会显示错误信息。 

  解决：将errors信息也保存到store中

3. 如果一个页面有两个表单，提交其中一个，另一个也会提交。

    分析：一个组件中只能有一个Form.create()，意味着this.props.form唯一，如果不使用from.create()包裹组件，组件中就拿不到this.props.form。

    解决：表单较多，单独抽出表单组件。 

4.  表单校验不提示错误信息，比如：团队名称是必填项，期望的是在用户未填名 称时，可以提示”请输入团队名称“，但是明明团队名称为空，却不提示错误信息。

    分析：因为getFieldDecorator()的功能只是用于和表单进行双向数据绑定，                      validateFields()才是校验error的方法。

   解决：在modal确认按钮的方法中加入validateFields的校验，若不写校验哪些部分，则 默认全都校验。

五：table

1. 如果给所有的columns都加了宽度，会发现还是按照均分显示的，

   解决：有几个不设置宽度，或者就是将整个表格的宽度设置的相对较宽，也可以使用scroll-x，但是scoll-x 会导致 表头和内容没有办法同时移动的情况 （当数据量比较大的时候），可以自行设置css的属性。

2.  设置了固定表头的时候 会出现 表格和内容不对照的情况

     解决：一定要设置宽度（参考是否是中英文问题， 是的话使用word-break 属性，自动处理空白断点和换行 )

六：menu pagination 等组件点击事件不生效时，多去找该组件是否被某些元素遮住。

一些思考：

1. 首先，拿到设计稿，应该先理清楚所有的交互逻辑，把所有复用的组件抽成独  立的组件，把整个项目划分成单个模块，弄清楚各个模块之间的关系。要把所有的模块和组件都想好，再开始写代码。

2. 错误排查时，不能太心急，一层一层往上找，不能漫无目的瞎找。

3. 制定计划，每个模块开发完成再进行下一个模块，模块之间尽量减耦合。

4. 多去思考为什么这样，而不是怎样实现这个功能。比如：成员管理中，项目管理员可以创建管理员和开发者以及访客，那么管理员可以同时出现在成员和管理员表格中吗？

5. 对于项目上的问题，可以保留自己的想法，不能为了单纯的实现某个功能而失去了自己的思考。

6.项目开发中遇到的问题或者学到的知识点要及时记录下来，然后整理成自己的博客或是文章。如果整理不出来，还是自己的理解不够深刻。

7.多考虑如果后期需要修改某个配置，那么现在写的时候怎样写能在修改时最省时省力。

8. 别怕失败，多学多问多总结。

短期规划

      项目前期走了很多弯路，部分原因是自己太心急，更多的是对于目前项目用到的脚手架掌握的还不够，短期之内希望可以重新学一下，多记录不要眼高手低。

写在最后

        感谢廖老师不厌其烦的帮忙解决各种各样的问题，感谢东哥的指点和建议，感谢小伙伴们的帮助。至此，我想应该再不会害怕失败了，因为没有一个人能保证所有的请求都正确，你眼中的巨佬也会因为写不出一手漂亮的代码而难过。害怕归根结底还是源于知识储备不够，与其浪费时间在害怕上面，不如从现在就开始查缺补漏。 因为现在永远都是最好的开始，也永远都是最早的打算。所以想做的事现在做才不难，想走的路现在走才不晚。就带着自信，坚定且从容~