// 题目描述：给出一个 32 位的有符号整数，你需要将这个整数中每位上的数字进行反转。
// 示例 1:

// 输入: 123

// 输出: 321

//  示例 2:

// 输入: -123

// 输出: -321

// 示例 3:

// 输入: 120

// 输出: 21

// 注意:

// 假设我们的环境只能存储得下 32 位的有符号整数，则其数值范围为 [−2^31,  2^31 − 1]。请根据这个假设，如果反转后整数溢出那么就返回 0。

// 分析：

// 1.首先，整数是不可遍历的，必须先将其转为字符串，然后倒序遍历这个字符串，把他从后向前插入数组中。

// 2.接下来，判断符号位，假设数组是['-','1','2','3']，那么数组第0位也就是遍历的最后一位，就是符号位，判断他是不是等于'-'，如果等于就将他放在数组的第一位，如果不等于的话，就说明他是个字符串数字，那么将他放在数组最后一位。

// 3.最后是判断是否溢出 溢出返回0

// 用到的方法：

// unshift():向数组的开头插入一个或多个值，并返回新的长度

// push():向数组末尾插入一个或多个值，并返回新的长度

// Math.pow():返回基数的指数幂

// 代码实现：

function reverse(num) {
    let arr = [];
    let str = num.toString();
    for (let i = str.length - 1; i > 0; i--) {
        arr.push(str[i])
    }
    if (nums[0] === ' -') {
        arr.unshift(nums[0])
    }
    arr.push(nums[0])
    let newNum = parseInt(arr.join(""), 10)
    if (newNum < Math.pow(-2, 31) || newNum > Math.pow(2, 31) - 1) {
        return 0;
    }
    return newNum
}